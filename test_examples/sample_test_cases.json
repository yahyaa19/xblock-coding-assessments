{
  "python_basic_math": {
    "language": "python",
    "problem_title": "Basic Math Operations",
    "description": "Write a Python program that performs basic mathematical operations",
    "test_cases": [
      {
        "name": "Addition Test",
        "description": "Test simple addition functionality",
        "type": "output_comparison",
        "input": "print(5 + 3)",
        "expected_output": "8",
        "timeout": 5
      },
      {
        "name": "Multiplication Test",
        "description": "Test multiplication with larger numbers",
        "type": "output_comparison", 
        "input": "print(12 * 7)",
        "expected_output": "84",
        "timeout": 5
      },
      {
        "name": "Division Test",
        "description": "Test division with floating point result",
        "type": "output_comparison",
        "input": "print(10 / 4)",
        "expected_output": "2.5",
        "timeout": 5
      }
    ],
    "file_templates": {
      "main.py": {
        "content": "# Write your Python code here\n# Example: print(\"Hello, World!\")\n\n",
        "type": "python"
      }
    }
  },
  "python_function_testing": {
    "language": "python",
    "problem_title": "Function Implementation",
    "description": "Implement functions that perform specific tasks",
    "test_cases": [
      {
        "name": "Factorial Function",
        "description": "Test factorial calculation function",
        "type": "output_comparison",
        "input": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))",
        "expected_output": "120",
        "timeout": 5
      },
      {
        "name": "Even Number Check",
        "description": "Test function that checks if number is even",
        "type": "output_comparison",
        "input": "def is_even(n):\n    return n % 2 == 0\n\nprint(is_even(4))\nprint(is_even(7))",
        "expected_output": "True\nFalse",
        "timeout": 5
      },
      {
        "name": "String Reversal",
        "description": "Test string reversal function",
        "type": "output_comparison",
        "input": "def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string('hello'))",
        "expected_output": "olleh",
        "timeout": 5
      }
    ],
    "file_templates": {
      "main.py": {
        "content": "# Implement your functions here\n\ndef factorial(n):\n    # Your code here\n    pass\n\ndef is_even(n):\n    # Your code here\n    pass\n\ndef reverse_string(s):\n    # Your code here\n    pass\n",
        "type": "python"
      },
      "utils.py": {
        "content": "# Helper functions (optional)\n\ndef helper_function():\n    pass\n",
        "type": "python"
      }
    }
  },
  "python_advanced_testing": {
    "language": "python",
    "problem_title": "Advanced Pattern Matching",
    "description": "Implement functions with complex output patterns",
    "test_cases": [
      {
        "name": "Contains Test",
        "description": "Test output contains specific text",
        "type": "contains",
        "input": "print('Processing data...')\nprint('Result: 42')\nprint('Done!')",
        "expected_output": "Result: 42",
        "timeout": 5
      },
      {
        "name": "Regex Pattern Test",
        "description": "Test output matches regex pattern",
        "type": "regex",
        "input": "import datetime\nprint(f'Current time: {datetime.datetime.now()}')",
        "expected_output": "Current time: \\d{4}-\\d{2}-\\d{2}",
        "timeout": 5
      },
      {
        "name": "Exact Match Test",
        "description": "Test exact output matching (with whitespace)",
        "type": "exact_match",
        "input": "print('  Exact match test  ')",
        "expected_output": "  Exact match test  ",
        "timeout": 5
      }
    ],
    "file_templates": {
      "main.py": {
        "content": "# Advanced testing examples\nimport datetime\n\n# Your code here\n",
        "type": "python"
      }
    }
  },
  "python_error_handling": {
    "language": "python",
    "problem_title": "Error Handling Tests",
    "description": "Test cases that should produce errors for testing error handling",
    "test_cases": [
      {
        "name": "Syntax Error Test",
        "description": "Test compilation error handling",
        "type": "output_comparison",
        "input": "print('Missing closing quote",
        "expected_output": "This should fail",
        "timeout": 5
      },
      {
        "name": "Runtime Error Test", 
        "description": "Test runtime error handling",
        "type": "output_comparison",
        "input": "print(10 / 0)",
        "expected_output": "This should fail with division by zero",
        "timeout": 5
      },
      {
        "name": "Timeout Test",
        "description": "Test timeout handling with infinite loop",
        "type": "output_comparison",
        "input": "while True:\n    pass",
        "expected_output": "This should timeout",
        "timeout": 2
      }
    ],
    "file_templates": {
      "main.py": {
        "content": "# Error handling test cases\n# These are intentionally problematic\n\n",
        "type": "python"
      }
    }
  },
  "java_basic_testing": {
    "language": "java",
    "problem_title": "Java Basic Operations",
    "description": "Basic Java programming tests",
    "test_cases": [
      {
        "name": "Hello World Test",
        "description": "Test basic Java output",
        "type": "output_comparison",
        "input": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "expected_output": "Hello, World!",
        "timeout": 10
      },
      {
        "name": "Math Operations Test",
        "description": "Test Java arithmetic",
        "type": "output_comparison",
        "input": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(15 + 25);\n        System.out.println(10 * 3);\n    }\n}",
        "expected_output": "40\n30",
        "timeout": 10
      }
    ],
    "file_templates": {
      "Main.java": {
        "content": "public class Main {\n    public static void main(String[] args) {\n        // Write your Java code here\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "type": "java"
      }
    }
  },
  "multi_file_project": {
    "language": "python",
    "problem_title": "Multi-File Python Project",
    "description": "A project with multiple files working together",
    "test_cases": [
      {
        "name": "Calculator Test",
        "description": "Test calculator functionality across multiple files",
        "type": "output_comparison",
        "input": "from calculator import Calculator\ncalc = Calculator()\nprint(calc.add(5, 3))\nprint(calc.multiply(4, 6))",
        "expected_output": "8\n24",
        "timeout": 10
      },
      {
        "name": "Utility Functions Test",
        "description": "Test utility functions",
        "type": "output_comparison",
        "input": "from utils import format_number, is_prime\nprint(format_number(1234.567))\nprint(is_prime(17))",
        "expected_output": "1,234.57\nTrue", 
        "timeout": 10
      }
    ],
    "file_templates": {
      "main.py": {
        "content": "# Main application file\nfrom calculator import Calculator\nfrom utils import format_number, is_prime\n\nif __name__ == '__main__':\n    calc = Calculator()\n    print(f'Calculator ready: {calc.version}')\n",
        "type": "python"
      },
      "calculator.py": {
        "content": "# Calculator module\nclass Calculator:\n    def __init__(self):\n        self.version = '1.0'\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError('Cannot divide by zero')\n        return a / b\n",
        "type": "python"
      },
      "utils.py": {
        "content": "# Utility functions\ndef format_number(num):\n    \"\"\"Format number with commas and 2 decimal places\"\"\"\n    return f'{num:,.2f}'\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"Generate fibonacci sequence up to n terms\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib\n",
        "type": "python"
      }
    }
  }
}
